/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {Component} from 'react';
import {StyleSheet, Text, View, ToastAndroid} from 'react-native';
import {
  BaiduAsr,
  StatusCode,
  IBaseData,
  RecognizerResultError,
  RecognizerResultData,
  VolumeData,
} from 'react-native-baidu-asr';
import config from '../../app.config.json';
import {userAsk} from '../hooks/hooks';
import {addListenerRecognize} from '../utils/event';

interface IProps {}

interface IState {
  speechRecognizerVolume: number;
  userSpeech: string;
  robotAnswer: string;
  isStart: boolean;
}

export default class VoiceRecognization extends Component<IProps, IState> {
  resultListener: any;
  errorListener: any;
  volumeListener: any;
  constructor(props: any) {
    super(props);
    this.state = {
      userSpeech: '☆语音识别☆',
      robotAnswer: '',
      speechRecognizerVolume: 0,
      isStart: false,
    };
  }

  componentDidMount() {
    BaiduAsr.init(config);
    this.resultListener = BaiduAsr.addResultListener(this.onRecognizerResult);
    this.errorListener = BaiduAsr.addErrorListener(this.onRecognizerError);
    this.volumeListener = BaiduAsr.addAsrVolumeListener(this.onAsrVolume);
    addListenerRecognize(this.startRecognize);
  }

  componentWillUnmount() {
    this.resultListener?.remove();
    this.errorListener?.remove();
    this.volumeListener?.remove();
    BaiduAsr.release();
  }

  onRecognizerResult = async (
    data: IBaseData<RecognizerResultData | undefined>,
  ) => {
    if (
      data.code === StatusCode.STATUS_FINISHED ||
      data.code === StatusCode.STATUS_LONG_SPEECH_FINISHED
    ) {
      if (data.data?.results_recognition?.length) {
        const result = data.data.results_recognition[0];
        this.setState({
          userSpeech: result,
        });
        const answer = await userAsk(result);
        this.setState({
          robotAnswer: answer.result,
          isStart: false,
        });
        BaiduAsr.cancel();
      }
    }
  };

  startRecognize = () => {
    BaiduAsr.start({
      VAD_ENDPOINT_TIMEOUT: 800,
      // 禁用标点符号
      DISABLE_PUNCTUATION: false,
      PID: 15373,
    });
    this.setState({isStart: true});
  };

  onRecognizerError = (data: IBaseData<RecognizerResultError>) => {
    this.setState({userSpeech: data.msg});
    ToastAndroid.show(
      `${data.msg}，错误码: 【${data.data.errorCode}, ${data.data.subErrorCode}】，${data.data.descMessage}`,
      ToastAndroid.LONG,
    );
    console.log('onRecognizerError ', JSON.stringify(data));
    BaiduAsr.cancel();
    this.setState({isStart: false});
  };

  /**
   * 处理音量变化
   * @param volume
   */
  onAsrVolume = (volume: VolumeData) => {
    // 一共7格音量 inputRange: [0, 100] outputRange:[0, 7]
    this.setState({
      speechRecognizerVolume: Math.floor((7 / 100) * volume.volumePercent),
    });
  };

  render() {
    const {userSpeech, robotAnswer, speechRecognizerVolume} = this.state;
    // 0,1,2,3 ...
    const speechRecognizerVolumeList = [
      ...Array(speechRecognizerVolume).keys(),
    ];
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>{userSpeech}</Text>
        <Text style={styles.welcome}>{robotAnswer}</Text>

        <View style={styles.bottomView}>
          {speechRecognizerVolumeList.reverse().map((value, index) => (
            <View
              style={[
                styles.volumeView,
                index === 0 ? undefined : styles.ml3,
                // @ts-ignore
                styles[`volume${value}`],
              ]}
              key={index}
            />
          ))}
          {speechRecognizerVolumeList.map((value, index) => (
            <View
              style={[
                styles.volumeView,
                value === 0 ? undefined : styles.mr3,
                // @ts-ignore
                styles[`volume${index}`],
              ]}
              key={index}
            />
          ))}
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 16,
    textAlign: 'center',
    margin: 10,
  },
  scrollViewContent: {
    flex: 1,
  },
  bottomView: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  volumeView: {
    width: 5,
    height: 18,
    borderRadius: 6,
  },
  volume0: {
    backgroundColor: 'rgba(248, 70, 70, 1)',
  },
  volume1: {
    backgroundColor: 'rgba(248, 70, 70, 0.8)',
  },
  volume2: {
    backgroundColor: 'rgba(248, 70, 70, 0.6)',
  },
  volume3: {
    backgroundColor: 'rgba(248, 70, 70, 0.4)',
  },
  volume4: {
    backgroundColor: 'rgba(248, 143, 143, 0.7)',
  },
  volume5: {
    backgroundColor: 'rgba(238, 238, 238, 0.7)',
  },
  volume6: {
    backgroundColor: 'rgba(255, 212, 17, 1)',
  },
  mr3: {
    marginRight: 3,
  },
  ml3: {
    marginLeft: 3,
  },
  resultText: {
    marginVertical: 3,
    marginLeft: 5,
  },
});
